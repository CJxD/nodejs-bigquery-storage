// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import '../../package.json';
import * as gax from 'google-gax';
import type {CallOptions, ClientOptions} from 'google-gax';
import * as protos from '../../protos/protos';

import {BigQueryWriteClient} from '../v1';

/**
 *  BigQuery Write API.
 *
 *  The Write API can be used to write data to BigQuery.
 *
 *  For supplementary information about the Write API, see:
 *  https://cloud.google.com/bigquery/docs/write-api
 * @class
 * @memberof storage
 */

type StreamConnection = {
  write_stream: WriteStream;
  connection: gax.CancellableStream;
};
type streamConnectionsMap = Record<string, gax.CancellableStream>;
type StreamConnections = {
  connection_list: StreamConnection[];
  connections: streamConnectionsMap;
};
type WriteStream = protos.google.cloud.bigquery.storage.v1.IWriteStream;
type AppendRowsResponse =
  protos.google.cloud.bigquery.storage.v1.AppendRowsResponse;
type AppendRowsRequest =
  protos.google.cloud.bigquery.storage.v1.IAppendRowsRequest;
type IInt64Value = protos.google.protobuf.IInt64Value;
type ProtoData =
  protos.google.cloud.bigquery.storage.v1.AppendRowsRequest.IProtoData;

export class WriterClient {
  //private _opts: ClientOptions | undefined;
  private _parent: string;
  private _writeStreamType: WriteStream['type'] = 'TYPE_UNSPECIFIED';
  private _streamId: string;
  private _client: BigQueryWriteClient;
  private _connections: StreamConnections;
  private _client_closed: boolean;
  private _appendRowsResponses: Promise<AppendRowsResponse>[];

  constructor(
    parent?: string,
    client?: BigQueryWriteClient,
    bqWriteClientOpts?: ClientOptions,
    writeStreamType?: WriteStream['type']
  ) {
    this._parent = parent ? parent : 'Please set a parent path';
    this._client = bqWriteClientOpts
      ? new BigQueryWriteClient(bqWriteClientOpts)
      : new BigQueryWriteClient() || client;
    this._writeStreamType = writeStreamType || this._writeStreamType;
    this._connections = {
      connection_list: [],
      connections: {},
    };
    this._streamId = 'Please open a connection to set connection name';
    this._appendRowsResponses = [];
    this._client_closed = false;
  }

  setParent = (projectId: string, datasetId: string, tableId: string): void => {
    const parent = `projects/${projectId}/datasets/${datasetId}/tables/${tableId}`;
    this._parent = parent;
  };

  getParent = (): string => {
    return this._parent;
  };

  getStreamId = (): string => {
    return this._streamId;
  };

  setStreamId = (streamId: string): void => {
    this._streamId = streamId;
  };

  getClient = (): BigQueryWriteClient => {
    return this._client;
  };

  setClient = (client: BigQueryWriteClient): void => {
    this._client = client;
  };

  getWriteStreams = (writeStream: WriteStream): undefined | null | string[] => {
    if (writeStream === undefined || writeStream.name === undefined) {
      return undefined;
    }
    if (writeStream.name === null) {
      return null;
    }
    return new Array(writeStream.name);
  };

  setWriteStreamType(streamType: WriteStream['type']): void {
    this._writeStreamType = streamType;
  }

  getWriteStreamType(): WriteStream['type'] {
    return this._writeStreamType;
  }

  getConnections(): StreamConnections {
    return this._connections;
  }

  getClientClosedStatus(): boolean {
    return this._client_closed;
  }

  getAppendRowsResponses(): Promise<AppendRowsResponse>[] {
    return this._appendRowsResponses;
  }

  async initializeStreamConnection(clientOptions?: CallOptions): Promise<void> {
    if (this._client_closed) {
      this._client_closed = false;
    }
    const request: protos.google.cloud.bigquery.storage.v1.ICreateWriteStreamRequest =
      {
        parent: this.getParent(),
        writeStream: {type: this.getWriteStreamType()},
      };
    const [response] = await this._client.createWriteStream(request);
    if (typeof [response] === undefined) {
      throw new gax.GoogleError(`${response}`);
    }
    console.log(`Stream connection created: ${response.name}`);
    try {
      if (response.name) {
        this.setStreamId(response.name);
        const write_stream: WriteStream = {
          name: response.name,
          type: this.getWriteStreamType(),
        };
        const stream_connection: StreamConnection = {
          write_stream: write_stream,
          connection: clientOptions
            ? this._client.appendRows(clientOptions)
            : this._client.appendRows(),
        };
        this._connections.connection_list.push(stream_connection);
        this._connections.connections[`${write_stream.name}`] =
          stream_connection.connection;
      }
    } catch {
      throw new Error('Stream connection failed');
    }
  }

  async appendRowsToStream(
    streamConnection: WriteStream['name'],
    serializedRows: ProtoData,
    offsetValue: IInt64Value
  ): Promise<void> {
    const connection: gax.CancellableStream =
      this._connections.connections[`${streamConnection}`];
    const request: AppendRowsRequest = {
      writeStream: streamConnection,
      protoRows: serializedRows,
      offset: offsetValue,
    };

    const response: PendingAppendRowsResponse = new PendingAppendRowsResponse();

    connection.write(request);

    connection.on('error', err => {
      throw err;
    });

    connection.on('data', async res => {
      await response._handleAppendRowsResponseData(res);
      this._appendRowsResponses.push(response._getAppendRowsResponse());
    });
  }

  async finalizeAndCloseStream(
    streamConnection: WriteStream['name']
  ): Promise<void> {
    // API call completed.
    const writeStream = this._streamId;
    const writeStreams: string[] | null = [];
    writeStreams.push(writeStream);
    const connection: gax.CancellableStream =
      this._connections.connections[`${streamConnection}`];

    const finalizeStreamReq: protos.google.cloud.bigquery.storage.v1.IFinalizeWriteStreamRequest =
      {
        name: writeStream,
      };

    this._client.finalizeWriteStream(finalizeStreamReq).then(result => {
      if (!result.includes(undefined)) {
        const [validResponse] = result;
      }
    });
    const batchCommitWriteStreamsReq: protos.google.cloud.bigquery.storage.v1.IBatchCommitWriteStreamsRequest =
      {
        parent: this._parent,
        writeStreams: writeStreams,
      };

    this._client
      .batchCommitWriteStreams(batchCommitWriteStreamsReq)
      .then(result => console.log(result));

    connection.end();
    this._client.close();
    this._client_closed = true;
  }
}

class PendingAppendRowsResponse {
  private _AppendRowsResponse: AppendRowsResponse | undefined;

  constructor() {
    this._AppendRowsResponse = undefined;
  }

  async _handleAppendRowsResponseData(response: Promise<any>): Promise<void> {
    response.then(res => {
      try {
        this._AppendRowsResponse = res;
      } catch {
        if (res.error) {
          throw new Error(res.error.meessage);
        } else {
          throw new Error(
            `Response to AppendRowsRequest cannot be undefined. Actual received response: ${res}`
          );
        }
      }
    });
  }
  async _getAppendRowsResponse(): Promise<AppendRowsResponse> {
    const response: AppendRowsResponse | undefined = this._AppendRowsResponse;

    return new Promise(resolve => {
      if (response != undefined) {
        return resolve;
      } else {
        throw new Error('Response cannot return undefined.');
      }
    });
  }
}

//Example
/*async () => {
  const writeStreamType = 'PENDING';
  const client = new WriterClient();
  client.setWriteStreamType(writeStreamType);

  type CustomerRecord = customer_record.customer_record.ICustomerRecord;
  const protoDescriptor: ProtoDescriptor = {};
  protoDescriptor.name = 'CustomerRecord';
  protoDescriptor.field = [
    {
      name: 'customer_name',
      number: 1,
      type: type.TYPE_STRING,
    },
    {
      name: 'row_num',
      number: 2,
      type: type.TYPE_INT64,
    },
  ];

  const schema: ProtoSchema = {
    protoDescriptor: protoDescriptor,
  };

  const root = protobufjs.Root.fromJSON(customerRecordProtoJson);
  if (!root) {
    throw Error('Proto must not be undefined');
  }

  const CustomerRecordProto = root.lookupType('customer_record.CustomerRecord');
  // Row 1
  const row1: CustomerRecord = {
    customerName: 'Lovelace',
    rowNum: 1,
  };
  const row1Message = new CustomerRecordMessage(
    row1.rowNum,
    row1.customerName
  ).createCustomerRecord();

  const serializedRow1Message: Uint8Array =
    CustomerRecordProto.encode(row1Message).finish();

  // Row 2
  const row2: CustomerRecord = {
    customerName: 'Turing',
    rowNum: 2,
  };
  const row2Message = new CustomerRecordMessage(
    row2.rowNum,
    row2.customerName
  ).createCustomerRecord();

  const serializedRow2Message: Uint8Array =
    CustomerRecordProto.encode(row2Message).finish();
  console.log(serializedRow1Message);
  console.log(typeof serializedRow2Message);
  const serializedRowData: ProtoData = {
    writerSchema: schema,
    rows: {
      serializedRows: [serializedRow1Message, serializedRow2Message],
    },
  };

  const offset: IInt64Value = {
    value: 0,
  };
  await client.initializeStreamConnection();
  const streamId = client.getStreamId();
  await client.initializeStreamConnection();
  await client.appendRowsToStream(streamId, serializedRowData, offset);
  await client.finalizeAndCloseStream(streamId);
};*/
