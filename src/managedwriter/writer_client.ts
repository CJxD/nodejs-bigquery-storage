// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import '../../package.json';
import * as gax from 'google-gax';
import type {CallOptions, ClientOptions} from 'google-gax';
import * as protos from '../../protos/protos';

import {BigQueryWriteClient} from '../v1';

/**
 *  BigQuery Write API.
 *
 *  The Write API can be used to write data to BigQuery.
 *
 *  For supplementary information about the Write API, see:
 *  https://cloud.google.com/bigquery/docs/write-api
 * @class
 * @memberof storage
 */

type StreamConnection = {
  write_stream: WriteStream;
  connection: gax.CancellableStream;
};
type streamConnectionsMap = Record<string, gax.CancellableStream>;
type StreamConnections = {
  connection_list: StreamConnection[];
  connections: streamConnectionsMap;
};
type WriteStream = protos.google.cloud.bigquery.storage.v1.IWriteStream;
type AppendRowResponse =
  protos.google.cloud.bigquery.storage.v1.AppendRowsResponse;
type AppendRowRequest =
  protos.google.cloud.bigquery.storage.v1.IAppendRowsRequest;
type IInt64Value = protos.google.protobuf.IInt64Value;
type ProtoData =
  protos.google.cloud.bigquery.storage.v1.AppendRowsRequest.IProtoData;

export class WriterClient {
  private _opts: ClientOptions | undefined;
  private _parent: string;
  private _writeStream: WriteStream = {
    name: undefined,
    type: 'TYPE_UNSPECIFIED',
  };
  private _writeStreamType: WriteStream['type'] = 'TYPE_UNSPECIFIED';
  private _streamId: string;
  private _client: BigQueryWriteClient;
  private _connections: StreamConnections;

  constructor(
    parent?: string,
    client?: BigQueryWriteClient,
    bqWriteClientOpts?: ClientOptions,
    writeStreamType?: WriteStream['type']
  ) {
    this._parent = parent ? parent : 'Please set a parent path';
    this._client = new BigQueryWriteClient(bqWriteClientOpts) || client;
    this._writeStreamType = writeStreamType || this._writeStreamType;
    this._connections = {
      connection_list: [],
      connections: {},
    };
    this._streamId = 'Please open a connection to set connection name';
  }

  setParent = (projectId: string, datasetId: string, tableId: string): void => {
    const parent = `projects/${projectId}/datasets/${datasetId}/tables/${tableId}`;
    this._parent = parent;
  };

  getParent = (): string => {
    return this._parent;
  };

  getStreamId = (): string => {
    return this._streamId;
  };

  setStreamId = (streamId: string): void => {
    this._streamId = streamId;
  };

  getClient = (): BigQueryWriteClient => {
    return this._client;
  };

  setClient = (client: BigQueryWriteClient): void => {
    this._client = client;
  };

  getWriteStreams = (writeStream: WriteStream): undefined | null | string[] => {
    if (writeStream === undefined || writeStream.name === undefined) {
      return undefined;
    }
    if (writeStream.name === null) {
      return null;
    }
    return new Array(writeStream.name);
  };

  setWriteStreamType(streamType: WriteStream['type']): void {
    this._writeStreamType = streamType;
  }

  getWriteStreamType(): WriteStream['type'] {
    return this._writeStreamType;
  }

  getConnections(): StreamConnections {
    return this._connections;
  }

  async initializeStreamConnection(clientOptions?: CallOptions): Promise<void> {
    const request: protos.google.cloud.bigquery.storage.v1.ICreateWriteStreamRequest =
      {
        parent: this.getParent(),
        writeStream: {type: this.getWriteStreamType()},
      };
    const [response] = await this._client.createWriteStream(request);
    if (typeof [response] === undefined) {
      throw new gax.GoogleError(`${response}`);
    }
    console.log(`Stream connection created: ${response.name}`);
    try {
      if (response.name) {
        this.setStreamId(response.name);
        const write_stream: WriteStream = {
          name: response.name,
          type: this.getWriteStreamType(),
        };
        const stream_connection: StreamConnection = {
          write_stream: write_stream,
          connection: clientOptions
            ? this._client.appendRows(clientOptions)
            : this._client.appendRows(),
        };
        this._connections.connection_list.push(stream_connection);
        this._connections.connections[`${write_stream.name}`] =
          stream_connection.connection;
        // console.log('This is the response name and what was set as streamId');
        // console.log(response.name);
        // console.log(this._streamId);
        // console.log(this._connections);
      }
    } catch {
      throw new Error('Stream connection failed');
    }
  }

  async appendRowsToStream(
    streamConnection: WriteStream['name'],
    serializedRows: ProtoData,
    offsetValue: IInt64Value
  ): Promise<AppendRowResponse[]> {
    const responses: AppendRowResponse[] | null = [];
    /*console.log(
      `This is the write_stream string we're using: ${streamConnection}`
    );*/
    const connection: gax.CancellableStream =
      this._connections.connections[`${streamConnection}`];
    const request: AppendRowRequest = {
      writeStream: streamConnection,
      protoRows: serializedRows,
      offset: offsetValue,
    };

    connection.write(request, () => {
      // console.log('Write complete!');
      connection.on('data', response => {
        // Check for errors.
        if (response.error) {
          throw new Error(response.error.message);
        }

        /*console.log(
          `This is the response we're getting over the wire from an appendRows request: ${response}`
        );*/
        responses.push(response);
        // console.log(...responses);
        // console.log(responses.length);

        if (responses.length === 1) {
          connection.end(() => {
            // console.log(...responses);
            this.closeStream();
            // console.log('The connection has ended.');
          });
        }
      });

      connection.on('error', err => {
        throw err;
      });
    });
    return responses;
  }

  async closeStream(): Promise<void> {
    // API call completed.
    const writeStream = this._streamId;
    /*console.log(
      `This is the writeStream we've stored and will be committing ${writeStream}`
    );*/
    const writeStreams: string[] | null = [];
    writeStreams.push(writeStream);
    /*console.log(
      `This is the array of writeStreams we're committing ${writeStreams}`
    );*/

    const finalizeStreamReq: protos.google.cloud.bigquery.storage.v1.IFinalizeWriteStreamRequest =
      {
        name: writeStream,
      };
    /*console.log(
      `This is the FinalizeWriteStreamRequest object: ${finalizeStreamReq}`
    );*/
    this._client.finalizeWriteStream(finalizeStreamReq).then(result => {
      if (!result.includes(undefined)) {
        const [validResponse] = result;
        // console.log(`Row count: ${validResponse.rowCount}`);
      }
    });
    const batchCommitWriteStreamsReq: protos.google.cloud.bigquery.storage.v1.IBatchCommitWriteStreamsRequest =
      {
        parent: this._parent,
        writeStreams: writeStreams,
      };
    /*console.log(
      `This is the BatchCommitWriteStreamsRequest object we're sending: ${batchCommitWriteStreamsReq}`
    );*/
    this._client
      .batchCommitWriteStreams(batchCommitWriteStreamsReq)
      .then(result => console.log(result));
  }
}

//Example
/*const type = protos.google.protobuf.FieldDescriptorProto.Type;
const customer_record_pb = require('../../samples/customer_record_pb.js');
const projectId = 'your-project';
const datasetId = 'your_dataset_';
const tableId = 'your_table';
const exOpts: ClientOptions = {
  projectId: projectId,
};
//const exParent = `projects/${projectId}/datasets/${datasetId}/tables/${tableId}`
const writer = new WriterClient(undefined, undefined, exOpts);
const streamType: WriteStream['type'] = 'PENDING';
writer.setWriteStreamType(streamType);
writer.setParent(projectId, datasetId, tableId);
writer.initializeStreamConnection().then(() => 'Stream initialized');

const protoDescriptorEx: ProtoDescriptor = {};
protoDescriptorEx.name = 'CustomerRecord';
protoDescriptorEx.field = [
  {
    name: 'customer_name',
    number: 1,
    type: type.TYPE_STRING,
  },
  {
    name: 'row_num',
    number: 2,
    type: type.TYPE_INT64,
  },
];

// Row 1
const row1Message = new customer_record_pb.CustomerRecord();
row1Message.row_num = 1;
row1Message.setCustomerName('Octavia');

// Row 2
const row2Message = new customer_record_pb.CustomerRecord();
row2Message.row_num = 2;
row2Message.setCustomerName('Turing');

const writerSchemaEx: ProtoSchema = {
  protoDescriptor: protoDescriptorEx,
};
const serializedRowsEx: ProtoRows = {
  serializedRows: [
    row1Message.serializeBinary(),
    row2Message.serializeBinary(),
  ],
};

const rowData: ProtoData = {
  rows: serializedRowsEx,
  writerSchema: writerSchemaEx,
};
console.log(
  `This is the length of the rows: ${rowData.rows?.serializedRows?.length}`
);

const offset: IInt64Value = {
  value: 0,
};

writer
  .initializeStreamConnection()
  .then(() => 'Stream initialized')
  .then(() =>
    writer
      .appendRowsToStream(writer.getStreamId(), rowData, offset)
      .then(appendRowsResponses => {
        console.log(`AppendRowsToStream has resolved: ${appendRowsResponses}`);
      })
  )
  .then(() => {
    writer.closeStream().then(res => {
      console.log(`Close stream has been resolved: ${res}`);
    });
  });*/
