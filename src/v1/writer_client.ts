// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */

// import * as gax from 'google-gax';
import {
    Callback,
    CallOptions,
    Descriptors,
    ClientOptions,
    GoogleError,
  } from 'google-gax';
  
  import {PassThrough} from 'stream';
  import * as protos from '../../protos/protos';
  import jsonProtos = require('../../protos/protos.json');
  /**
   * Client JSON configuration object, loaded from
   * `src/v1/big_query_write_client_config.json`.
   * This file defines retry strategy and timeouts for all API methods in this library.
   */
  import * as gapicConfig from './big_query_write_client_config.json';
  
  //import version = require('../../../package.json').version;
  import {BigQueryWriteClient} from "../v1";
  import { createParent, createSerializedRows } from './helpers_sandbox';

  /**
   *  BigQuery Write API.
   *
   *  The Write API can be used to write data to BigQuery.
   *
   *  For supplementary information about the Write API, see:
   *  https://cloud.google.com/bigquery/docs/write-api
   * @class
   * @memberof v1
   */
     
  
  enum StreamType {
      Type_Unspecified = "TYPE_UNSPECIFIED",
      Committed = "COMMITTED",
      Pending = "PENDING",
      Buffered = "BUFFERED"
  }
  
  
  type WriteStream = {
      name?: string | null | undefined,
      type: StreamType,
      create_time?: protos.google.protobuf.Timestamp,
      commit_time?: protos.google.protobuf.Timestamp,
      table_schema?: protos.google.cloud.bigquery.storage.v1.TableSchema
  }
  type AppendRowResponse = protos.google.cloud.bigquery.storage.v1.AppendRowsResponse;
  
  
  export class WriterClient extends BigQueryWriteClient {
      
      async createStream(parent: string, clientOptions?: ClientOptions) {
          const writer = new BigQueryWriteClient();
          let writeStream: WriteStream = {type: StreamType.Committed};
  
          let request = {
              parent,
              writeStream,
          };
  
          let [response] = await writer.createWriteStream(request);
  
          console.log(`Stream created: ${response.name}`);
  
          const stream = await writer.appendRows(clientOptions);
          return stream;
      }
  
      async appendRowsCommitted(stream: BigQueryWriteClient, writeStream: WriteStream, serializedRows: Uint8Array[], offsetValue: number): Promise<AppendRowResponse[]> {
          const responses: AppendRowResponse[] = [];        
  
          let request = {
              writeStream,
              protoRows: {value: serializedRows},
              offset: {value: offsetValue},
          };
          let result = await stream.appendRows(request);
          
          result.forEach((appendResult: AppendRowResponse) => {
              responses.push(appendResult);
          })
          return responses;
      }
  
      closeStream(stream: BigQueryWriteClient, writeStream: WriteStream) {
              // API call completed.
              try {
                const finalResponse = await stream.finalizeWriteStream({
                  name: writeStream.name,
                });
               // console.log(`Row count: ${finalResponse.rowCount}`);
               // temporary check, above needs to be tinkered with to create an instance of the response object that can parse the result of the promise.
               console.log(`Row count: ${finalResponse.toString()}`);
              } catch (err) {
                console.log(err);
              }
      }
  
  // Example
  
  const rowData = createSerializedRows(["my-rows"]);
  
  const writer = new WriterClient(); // add ids to constructor
  const parent = createParent(projectId, datasetId, tableId);
  const writeStream = Promise.resolve(writer.createStream(parent));
  writer.appendRowsCommitted(writer, writeStream, rowData, 0)
  writer.closeStream(writer, writeStream)